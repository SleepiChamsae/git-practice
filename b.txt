reset는 선택한 커밋 버전으로 되돌리기 때문에
돌아가기 전 파일들과 로그들이 사라진다.

원격 저장소에서와 내 저장소간의 로그가 불일치하게 되고, 그렇게 되면 원격 저장소에 뒤덮어쓰기를 시행하게 되어
다른 사람들이 또 커밋을 하려 할 때 문제가 발생하게 된다.


revert를 하게 되면 모든 로그들이 남아있고, 리버트를 로그로 남겨준다.
revert는 선택한 commit 을 없던 일로 하게 한다.

b.추가 -> b.수정 -> c.추가 -> c.수정 을 하고 
revert b.추가 를 하게 되면 c만 남게 되는 것이다.

되돌리는 이유를 로그로 남길 수 있고, 변경사항이 아닌 파일들은 안 바꾼다.
이때 뒤로 돌리기 + 다른 수정사항도 커밋할 때에는 --no-commit 옵션을 사용한다.



git branch -m {before} {after}
이름을 before에서 after로 수정한다.

git branch -d {target}
타겟 브랜치를 삭제한다.

두 브랜치의 상태가 같으면 git log 에서 보면 서로 상태가 같아 같이 나온다.

git checkout -> git switch, git restore로 바뀜


두 브랜치 합치기 
git merge vs git rebase
머지 - 커밋 하나를 자동으로 만들어서 둘 합쳐지는 애의 수정 내용들을 모두 합쳐버림.
사용 내역이 커밋으로 남음
merge를 하면 둘다 시점이 통일되게 됨

rebase - 특정 브랜치의 모든 것을 다른 브랜치에 이어 붙여버린다.
안남음 협업할때 조심
rebase는 작은 거에서 큰 거를 넣는 방식
rebas는 서로 시점이 통일이 되지 않음
main이 뒤에 있음
git switch main -> git merge c를 해서 시점읕 통일시킬 수 있음



CONFLICT (충돌)
같은 파일에서 다른 내용이 입력되려는 상황에서 충돌이 발생


